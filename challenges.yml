many-to-one_2:
    question: |
        Suppose you have a `Product` entity and each `Product` should be related to
        a single `Category`. What property should you add to `Product` to
        accomplish this? And what would the corresponding column in the database be called?
    explanation: |
        In PHP land, we get to *entirely* ignore the database and just think about objects.
        Since the `Product` object should have a related `Category` object, it makes sense
        to call that property `category`.

        What the column is called in the database doesn't really matter. But by default,
        Doctrine will call it `category_id`, and it will hold the related "id" value.
    features:
        multiple_choice:
            choices:
                a: |
                    `category` property and `category` column
                b: |
                    `categoryId` property and `category_id` column
                c: |
                    `category` property and `category_id` column
            correct: c

saving-relations_2:
    question: |
        I'm trying to relate a `Product` object to a `Category`... but it's
        not working. What's wrong with my code?

        ```php
        $category = new Category();
        // ...

        $product->setCategory($category->getId());

        $entityManager->persist($product);
        $entityManager->persist($category);

        $entityManager->flush();
        ```
    explanation: |
        One *great* thing about Doctrine relations is that it does *not* matter which order you
        save the objects. All we need to do is `persist()` the objects (in any order) and then
        call `flush()`. Doctrine is smart enough to figure out that it needs to INSERT the
        `Category` first (so that it has an id) and *then* use that `id` to save the `Product`.

        And, once again, in PHP, we almost get to ignore the database entirely. So when we relate
        two objects - like `Category` and `Product` - we relate them by setting *objects* onto
        the properties, not ids.
    features:
        multiple_choice:
            choices:
                a: |
                    The `$category` needs to be persisted first so that its id is available to be set onto `$product`.
                b: |
                    `$product->setCategory()` should be passed a `Category` object, not the id.
                c: |
                    `$product->setCategory($category->getId());` needs to be called *after* the `$category` has been saved to the database.
            correct: b

fetching-relations_6:
    question: |
        I'm doing some debugging and I have the following code:

        ```php
        public function somePage($id)
        {
            $question = $questionRepository->find($id);
            $answers = $question->getAnswers();

            dd($answers);
        }
        ```

        When the `dd()` is hit, how many queries have been executed?
    explanation: |
        The first query is pretty obvious: `$questionRepository->find($id)` fetches the data for that
        *one* specific question. But, unless you're using `fetch="EAGER"` (not a feature we talk about
        in the tutorial), this will *only* fetch for the question data: it will not *also* query for the
        related answers.

        Then, it *might* seem that calling `$question->getAnswers()` would make a second query, but it does
        *not*. Doctrine is smart: it won't make that query until you try to *use* this property - e.g.
        `count($answers)` or looping over `$answers`.
    features:
        multiple_choice:
            choices:
                a: |
                    2 queries: one to query for the `Question` and one to query for the related answers.
                b: |
                    1 query: the initial query grabs all the `Question` data and related `Answer` data via an implicit JOIN.
                c: |
                    1 query: the initial query grabs the `Question` data. No `Answer` data has been queried yet.
                d: |
                    0 queries: our site works by *pure* magic: no queries needed to fetch data!!! Web scale!
            correct: c

owning-vs-inverse_8:
    question: |
        I have a `ManyToOne` relationship between `Product` and `Category`. What is *not* true about that relationship?
    explanation: |
        Yes, yes and yes! `ManyToOne` === `OneToMany`... just seen in the other direction. And because `ManyToOne`
        is the "owning" side, it is *required*... while you could choose to *not* add the `OneToMany` side (it
        would simply mean that you don't have the `$category->getProducts()` convenience method).

        Finally, if you set data on the *inverse* side of a relationship (on the `$products` property inside `Category`
        in this example) and then save, Doctrine completely ignores that: it only looks at the owning side when
        saving. But... thanks to smart code that `make:entity` generated, if you set the inverse side, that
        method (e.g. `addProduct()`) handles setting the "owning" side for you. So... it all just works!
    features:
        multiple_choice:
            choices:
                a: |
                    This same relationship can be viewed as a `OneToMany` from `Category` to `Product`.
                b: |
                    Mapping the `ManyToOne` relationship is required, but mapping the `OneToMany` is optional.
                c: |
                    If you set the inverse site of the relationship (e.g. `$category->addProduct($product)`),
                    it will *not* save, unless you have some "smart" code inside your `addProduct()`
                    method that also sets the owning side.
                d: |
                    All of these statements are true.
            correct: d

collection-criteria_11:
    question: |
        I can already call `$category->getProducts()` to get a collection of *all* of the products
        for a specific `Category`. But now, I want an easy way to be able to get that same collection,
        but filtered by newest DESC *and* where a product's price is greater than $100. Is that possible?
    explanation: |
        The `ORM\OrderBy` can be used to change the sorting of `$category->getProducts()`... but you can't
        control anything else unless you create a custom method.

        Technically, adding a `getExpensiveProducts()` method that leverage the `->filter()` method *would* work.
        But unless you will *always* have only a *few* related products, this could hurt performance big time
        because Doctrine will need to query for *all* of the products... before they can be filtered. Using
        the `Criteria` system is the best way.
    features:
        multiple_choice:
            choices:
                a: |
                    Yes: use `ORM\OrderBy` and `ORM\WhereBy` above the `$products` property inside `Category`.
                b: |
                    Yes: add a new `getExpensiveProducts()` method and use the `Criteria` system.
                c: |
                    Yes: add a new `getExpensiveProducts()` method and leverage the `->filter()` method on the `$this->products` property.
                d: |
                    No: it's not possible because you need a service to do this. And so, this logic can't live in your entity class.
            correct: b

join-n-plus-one_14:
    question: |
        Imagine we have the following code in a Twig template:

        ```twig
        {% for product in category.products %}
            {{ product.name }}
        {% endfor %}
        ```

        To fetch the `Category` object, in the controller, we call this method on `CategoryRepository`:

        ```php
        public function findBySlug(string $slug): ?Category
        {
            return $this->createQueryBuilder('category')
                ->andWhere('category.slug = :slug')
                ->setParameter('slug', $slug);
                ->getQuery()
                ->getOneOrNullResult();
            }
        }
        ```

        But when I load the page... I have 11 queries just to render 10 products! Yikes! To try to fix this, I
        made this change:

        ```diff
        public function findBySlug(string $slug): ?Category
        {
           return $this->createQueryBuilder('category')
                ->andWhere('category.slug = :slug')
                ->setParameter('slug', $slug);
        +       ->leftJoin('category.product', 'product')
        +       ->addSelect('product')
               ->getQuery()
               ->getOneOrNullResult();
           }
        }
        ```

        Will this reduce my quries? And, do I need to tweak any other parts of my code?
    explanation: |
        This is the *perfect* way to solve the N+1 problem. By "joining" to the related table
        and then selecting its data, you get all the data you need in one query.

        One... kind of "odd" (but awesome) thing is that, when you do this, even though Doctrine
        is querying for *way* more data, it will *still* return the exact same result as before:
        a single `Category` object. But, internally, that `Category` will be preloaded
        with all of its related Products.
    features:
        multiple_choice:
            choices:
                a: |
                    Yes: this will reduce the queries and no other changes are needed.
                b: |
                    Yes: this will reduce the queries. But because we're now *also* selecting the `category` data,
                    you'll need to update the template to account for this.
                c: |
                    No: this will not reduce the queries because `leftJoin()` is needed instead of `innerJoin()`.
            correct: a

search-form_15:
    question: |
        On the "Category" page, I've added a search box that will allow my users to search for
        products that are in that category. Here's the query I built for this in `ProductRepository`:

        ```php
        public function searchCategory(Category $category, string $search): array
        {
            return $this->createQueryBuilder('product')
                ->andWhere('product.category = :category')
                ->andWhere('product.name LIKE :term')
                ->orWhere('product.description LIKE :term')
                ->setParameter('category', $category)
                ->setParameter('term', '%'.$search.'%')
                ->getQuery()
                ->getResult();
        }
        ```

        Is this correct?
    explanation: |
        In short, never use `orWhere()`! Why? In this situation, the final WHERE clause will look something like this:
        
        > WHERE
        >   category_id = 5
        >   AND name LIKE '%foo%'
        >   OR description LIKE '%foo%'

        But what we *need* is:

        > WHERE
        >   category_id = 5
        >   AND (name LIKE '%foo%' OR description LIKE '%foo%')

        The missing parentheses will return products in *any* category... as long as their description
        contains `foo`... which is not what we want.

        In the QueryBuilder, the solution looks like this:
        
        ```php
        ->andWhere('product.name LIKE :term OR product.description LIKE :term')
        ```

    features:
        multiple_choice:
            choices:
                a: |
                    Yes! This combines a fuzzy search on two categories AND filters to a specific category.
                b: |
                    No: You can't put `%` around a paramter: this needs to be added into the WHERE clause.
                c: |
                    No: This will match the description of *any* product in *any* category.
                d: |
                    No: You need to call `setParameter()` again because you're using `:term` two times.
            correct: c

many-to-many_17:
    question: |
        I've just used `make:entity` to build a ManyToMany relationship between `Product` and
        `Distributor`. How will this look in the database?
    explanation: |
        The ManyToMany relationship is special because it is the only time where Doctrine creates and
        manages a table *for* you (the join table) that is not tied directly to an entity. This is
        how a ManyToMany relationship is handled in all relational databases.
    features:
        multiple_choice:
            choices:
                a: |
                    The `product` table will have a `distributor_id` column and the `distributor` table will have a `product_id` column.
                b: |
                    A new `product_distributor` table will be created in the database... even though there is no `ProductDistributor` entity.
                c: |
                    The `product` table will have a `distributors` foreign key array column.
            correct: b

many-to-many-saving_18:
    question: |
        I have a `Product` entity that is a ManyToMany to `Distributor`. Imagine that
        the `$distributor`, `$product1` and `$product2` objects have already been
        saved to the database:

        ```php
        $distributor->addProduct($product1);
        $entityManager->flush();

        $distributor->addProduct($product1);
        $distributor->addProduct($product2);
        $entityManager->flush();

        $distributor->removeProduct($product1);
        $entityManager->flush();
        ```

        After running this code, how many rows are in the `product_distributor` table?
    explanation: |
        If you set a redundant item on a relationship - like add `$product1` even though it's already added -
        you won't get an error... but it also won't add a 2nd row. It just ignores it.

        So, the queries for this situation are:

        * `flush()` 1: INSERT a row for $product1
        * `flush()` 2: INSERT a row for $product2
        * `flush()` 3: DELETE the row for $product1
    features:
        multiple_choice:
            choices:
                a: |
                    2: One for the remaining `$product1` and one for `$product2`
                b: |
                    1: Just `$product2`
                c: |
                    Trick question! An exception will be thrown when adding `$product1` a second time!
            correct: b

broken-migration_22:
    question: |
        Imagine you run a migration with 5 queries in it... and it fails on the 2nd query! What do we do???
    explanation: |
        This is... a bit of a trick question. If you're using PostgreSQL, then answer (a) is correct because
        PostgreSQL will "roll back" (undo) the changes in the first query. In other words, the end result
        is that *none* of the migration was executed. And so, you can fix it and retry it.

        But... if you're using MySQL... it's a bit silly and does *not* support "rollback" on things like
        `ALTER TABLE` statements. This leaves your migration in a "partially-run-half-dead-zombie" state.
        And so you need to reset things to properly test.
    features:
        multiple_choice:
            choices:
                a: |
                    Just fix the migration and run it again. All modern database systems are able to "roll back"
                    the 1st query to reset the system.
                b: |
                    Just fix the migration and run it again. The migrations system keeps track of exactly
                    which queries have and haven't been executed. When you re-run the migration later,
                    it'll skip the query.
                c: |
                    After fixing the migration, the only safe thing to do is completely reset your database
                    to the structure (and data) it had before you ran the migration. Then you can run the migration
                    to validate that it works.
            correct: c
